apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply from: rootProject.file("quality.gradle")

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")


    compileSdkVersion globalConfiguration["compilesdk"]
    defaultConfig {
        applicationId "com.nicholasdoglio.newsstand"
        minSdkVersion globalConfiguration["minsdk"]
        targetSdkVersion globalConfiguration["targetsdk"]
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies

    def commonDependencies = rootProject.ext.commonDependencies
    def commonTestDependencies = rootProject.ext.commonTestDependencies

    //Libraries
    implementation commonDependencies.kotlin
    implementation commonDependencies.paging
    implementation commonDependencies.ktx
    implementation commonDependencies.rxjava
    implementation commonDependencies.rxrelay
    implementation commonDependencies.rxkotlin
    implementation commonDependencies.threeten
    implementation presentationDependencies.appcompat
    implementation presentationDependencies.recyclerview
    implementation presentationDependencies.cardview
    implementation presentationDependencies.material
    implementation presentationDependencies.constraint
    implementation presentationDependencies.lifecycleCommons
    implementation presentationDependencies.lifecycleExtensions
    implementation presentationDependencies.rxbinding
    implementation presentationDependencies.rxAndroid
    implementation presentationDependencies.dispose
    implementation presentationDependencies.disposeAndroid
    implementation presentationDependencies.disposeComponents
    implementation presentationDependencies.dagger
    implementation presentationDependencies.daggerAndroid
    implementation presentationDependencies.daggerAndroidSupport
    implementation presentationDependencies.epoxy
    implementation presentationDependencies.glide
    implementation presentationDependencies.navigationFragment
    implementation presentationDependencies.navigationUi
    implementation presentationDependencies.firebase
    kapt presentationDependencies.epoxyProcessor
    kapt presentationDependencies.glideKapt
    kapt presentationDependencies.daggerKapt
    kapt presentationDependencies.daggerAndroidKapt


    implementation project(':domain')
    implementation project(':data')

    //Debugging
    implementation commonDependencies.timber
    releaseImplementation presentationDependencies.leakCanaryRelease
    debugImplementation presentationDependencies.leakCanaryDebug

    //Testing
    testImplementation commonTestDependencies.junit
    testImplementation commonTestDependencies.kotlinJunit
    testImplementation commonTestDependencies.mockk
    androidTestImplementation presentationTestDependencies.archTesting
    androidTestImplementation presentationTestDependencies.rules
    androidTestImplementation presentationTestDependencies.runner
    androidTestImplementation presentationTestDependencies.espressoIntents
    androidTestImplementation presentationTestDependencies.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

// Ensure the no-op dependency is always used in JVM tests.
configurations.all { config ->
    if (config.name.contains('UnitTest')) {
        config.resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
