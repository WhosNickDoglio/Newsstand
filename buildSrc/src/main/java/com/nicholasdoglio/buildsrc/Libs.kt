package com.nicholasdoglio.buildsrc

/**
 * Generated by [gradle-kotlin-dsl-libs](https://github.com/jmfayard/gradle-kotlin-dsl-libs)
 *
 * Run again
 *   `$ ./gradlew syncLibs`
 * to update this file */
object Libs {
  const val navigation_fragment_ktx: String =
    "android.arch.navigation:navigation-fragment-ktx:" + Versions.android_arch_navigation

  const val navigation_ui_ktx: String =
    "android.arch.navigation:navigation-ui-ktx:" + Versions.android_arch_navigation

  /**
   * [rxjava2 website](https://developer.android.com/topic/libraries/architecture/index.html) */
  const val rxjava2: String = "android.arch.paging:rxjava2:" + Versions.rxjava2

  /**
   * [appcompat website](http://developer.android.com/tools/extras/support-library.html) */
  const val appcompat: String = "androidx.appcompat:appcompat:" + Versions.appcompat

  /**
   * [core-testing website](https://developer.android.com/topic/libraries/architecture/index.html) */
  const val core_testing: String = "androidx.arch.core:core-testing:" + Versions.core_testing

  /**
   * [constraintlayout website](http://tools.android.com) */
  const val constraintlayout: String =
    "androidx.constraintlayout:constraintlayout:" + Versions.constraintlayout

  /**
   * [core-ktx website](http://developer.android.com/tools/extras/support-library.html) */
  const val core_ktx: String = "androidx.core:core-ktx:" + Versions.core_ktx

  /**
   * [fragment-ktx website](http://developer.android.com/tools/extras/support-library.html) */
  const val fragment_ktx: String = "androidx.fragment:fragment-ktx:" + Versions.fragment_ktx

  /**
   * [lifecycle-common-java8 website](https://developer.android.com/topic/libraries/architecture/index.html) */
  const val lifecycle_common_java8: String =
    "androidx.lifecycle:lifecycle-common-java8:" + Versions.androidx_lifecycle

  /**
   * [lifecycle-extensions website](https://developer.android.com/topic/libraries/architecture/index.html) */
  const val lifecycle_extensions: String =
    "androidx.lifecycle:lifecycle-extensions:" + Versions.androidx_lifecycle

  /**
   * [paging-runtime website](https://developer.android.com/topic/libraries/architecture/index.html) */
  const val paging_runtime: String = "androidx.paging:paging-runtime:" + Versions.paging_runtime

  /**
   * [recyclerview website](http://developer.android.com/tools/extras/support-library.html) */
  const val recyclerview: String = "androidx.recyclerview:recyclerview:" + Versions.recyclerview

  /**
   * [room-compiler website](https://developer.android.com/topic/libraries/architecture/index.html) */
  const val room_compiler: String = "androidx.room:room-compiler:" + Versions.androidx_room

  /**
   * [room-runtime website](https://developer.android.com/topic/libraries/architecture/index.html) */
  const val room_runtime: String = "androidx.room:room-runtime:" + Versions.androidx_room

  /**
   * [room-rxjava2 website](https://developer.android.com/topic/libraries/architecture/index.html) */
  const val room_rxjava2: String = "androidx.room:room-rxjava2:" + Versions.androidx_room

  /**
   * [room-testing website](https://developer.android.com/topic/libraries/architecture/index.html) */
  const val room_testing: String = "androidx.room:room-testing:" + Versions.androidx_room

  /**
   * [espresso-core website](https://developer.android.com/testing) */
  const val espresso_core: String =
    "androidx.test.espresso:espresso-core:" + Versions.espresso_core

  /**
   * [rules website](https://developer.android.com/testing) */
  const val androidx_test_rules: String = "androidx.test:rules:" + Versions.androidx_test

  /**
   * [runner website](https://developer.android.com/testing) */
  const val androidx_test_runner: String = "androidx.test:runner:" + Versions.androidx_test

  /**
   * [epoxy-processor website](https://github.com/airbnb/epoxy) */
  const val epoxy_processor: String =
    "com.airbnb.android:epoxy-processor:" + Versions.com_airbnb_android

  /**
   * [epoxy website](https://github.com/airbnb/epoxy) */
  const val epoxy: String = "com.airbnb.android:epoxy:" + Versions.com_airbnb_android

  /**
   * [gradle website](https://developer.android.com/studio) */
  const val com_android_tools_build_gradle: String =
    "com.android.tools.build:gradle:" + Versions.com_android_tools_build_gradle

  /**
   * [lint-gradle website](https://developer.android.com/studio) */
  const val lint_gradle: String = "com.android.tools.lint:lint-gradle:" + Versions.lint_gradle

  /**
   * [compiler website](https://github.com/bumptech/glide) */
  const val com_github_bumptech_glide_compiler: String =
    "com.github.bumptech.glide:compiler:" + Versions.com_github_bumptech_glide

  /**
   * [glide website](https://github.com/bumptech/glide) */
  const val glide: String =
    "com.github.bumptech.glide:glide:" + Versions.com_github_bumptech_glide

  /**
   * [recyclerview-integration website](https://github.com/bumptech/glide) */
  const val recyclerview_integration: String =
    "com.github.bumptech.glide:recyclerview-integration:" + Versions.com_github_bumptech_glide

  const val exoplayer: String = "com.google.android.exoplayer:exoplayer:" + Versions.exoplayer

  /**
   * [dagger-android-processor website](https://github.com/google/dagger) */
  const val dagger_android_processor: String =
    "com.google.dagger:dagger-android-processor:" + Versions.com_google_dagger

  /**
   * [dagger-android-support website](https://github.com/google/dagger) */
  const val dagger_android_support: String =
    "com.google.dagger:dagger-android-support:" + Versions.com_google_dagger

  /**
   * [dagger-android website](https://github.com/google/dagger) */
  const val dagger_android: String =
    "com.google.dagger:dagger-android:" + Versions.com_google_dagger

  /**
   * [dagger-compiler website](https://github.com/google/dagger) */
  const val dagger_compiler: String =
    "com.google.dagger:dagger-compiler:" + Versions.com_google_dagger

  /**
   * [dagger website](https://github.com/google/dagger) */
  const val dagger: String = "com.google.dagger:dagger:" + Versions.com_google_dagger

  const val firebase_crash: String =
    "com.google.firebase:firebase-crash:" + Versions.firebase_crash

  /**
   * [google-services website](http://tools.android.com/) */
  const val google_services: String = "com.google.gms:google-services:" + Versions.google_services

  /**
   * [rxbinding-kotlin website](https://github.com/JakeWharton/RxBinding/) */
  const val rxbinding_kotlin: String =
    "com.jakewharton.rxbinding2:rxbinding-kotlin:" + Versions.rxbinding_kotlin

  const val rxrelay: String = "com.jakewharton.rxrelay2:rxrelay:" + Versions.rxrelay

  /**
   * [threetenabp website](https://github.com/JakeWharton/ThreeTenABP/) */
  const val threetenabp: String =
    "com.jakewharton.threetenabp:threetenabp:" + Versions.threetenabp

  /**
   * [timber website](https://github.com/JakeWharton/timber) */
  const val timber: String = "com.jakewharton.timber:timber:" + Versions.timber

  /**
   * [leakcanary-android-no-op website](http://github.com/square/leakcanary/) */
  const val leakcanary_android_no_op: String =
    "com.squareup.leakcanary:leakcanary-android-no-op:" + Versions.com_squareup_leakcanary

  /**
   * [leakcanary-android website](http://github.com/square/leakcanary/) */
  const val leakcanary_android: String =
    "com.squareup.leakcanary:leakcanary-android:" + Versions.com_squareup_leakcanary

  /**
   * [leakcanary-support-fragment website](http://github.com/square/leakcanary/) */
  const val leakcanary_support_fragment: String =
    "com.squareup.leakcanary:leakcanary-support-fragment:" + Versions.com_squareup_leakcanary

  /**
   * [moshi-kotlin-codegen website](https://github.com/square/moshi) */
  const val moshi_kotlin_codegen: String =
    "com.squareup.moshi:moshi-kotlin-codegen:" + Versions.com_squareup_moshi

  /**
   * [moshi-kotlin website](https://github.com/square/moshi) */
  const val moshi_kotlin: String =
    "com.squareup.moshi:moshi-kotlin:" + Versions.com_squareup_moshi

  /**
   * [logging-interceptor website](https://github.com/square/okhttp) */
  const val logging_interceptor: String =
    "com.squareup.okhttp3:logging-interceptor:" + Versions.com_squareup_okhttp3

  /**
   * [okhttp website](https://github.com/square/okhttp) */
  const val okhttp: String = "com.squareup.okhttp3:okhttp:" + Versions.com_squareup_okhttp3

  /**
   * [adapter-rxjava2 website](https://github.com/square/retrofit/) */
  const val adapter_rxjava2: String =
    "com.squareup.retrofit2:adapter-rxjava2:" + Versions.com_squareup_retrofit2

  /**
   * [retrofit-mock website](https://github.com/square/retrofit/) */
  const val retrofit_mock: String =
    "com.squareup.retrofit2:retrofit-mock:" + Versions.com_squareup_retrofit2

  /**
   * [retrofit website](https://github.com/square/retrofit/) */
  const val retrofit: String =
    "com.squareup.retrofit2:retrofit:" + Versions.com_squareup_retrofit2

  /**
   * [autodispose-android-archcomponents-ktx website](https://github.com/uber/AutoDispose/) */
  const val autodispose_android_archcomponents_ktx: String =
    "com.uber.autodispose:autodispose-android-archcomponents-ktx:" + Versions.com_uber_autodispose

  /**
   * [autodispose-android-ktx website](https://github.com/uber/AutoDispose/) */
  const val autodispose_android_ktx: String =
    "com.uber.autodispose:autodispose-android-ktx:" + Versions.com_uber_autodispose

  /**
   * [autodispose-ktx website](https://github.com/uber/AutoDispose/) */
  const val autodispose_ktx: String =
    "com.uber.autodispose:autodispose-ktx:" + Versions.com_uber_autodispose

  /**
   * [mockk website](http://mockk.io) */
  const val mockk: String = "io.mockk:mockk:" + Versions.mockk

  /**
   * [rxandroid website](https://github.com/ReactiveX/RxAndroid) */
  const val rxandroid: String = "io.reactivex.rxjava2:rxandroid:" + Versions.rxandroid

  /**
   * [rxjava website](https://github.com/ReactiveX/RxJava) */
  const val rxjava: String = "io.reactivex.rxjava2:rxjava:" + Versions.rxjava

  /**
   * [rxkotlin website](https://github.com/ReactiveX/RxKotlin) */
  const val rxkotlin: String = "io.reactivex.rxjava2:rxkotlin:" + Versions.rxkotlin

  const val jmfayard_github_io_gradle_kotlin_dsl_libs_gradle_plugin: String =
    "jmfayard.github.io.gradle-kotlin-dsl-libs:jmfayard.github.io.gradle-kotlin-dsl-libs.gradle.plugin:" + Versions.jmfayard_github_io_gradle_kotlin_dsl_libs_gradle_plugin

  /**
   * [junit website](http://junit.org) */
  const val junit: String = "junit:junit:" + Versions.junit

  const val org_gradle_kotlin_kotlin_dsl_gradle_plugin: String =
    "org.gradle.kotlin.kotlin-dsl:org.gradle.kotlin.kotlin-dsl.gradle.plugin:" + Versions.org_gradle_kotlin_kotlin_dsl_gradle_plugin

  /**
   * [org.jacoco.agent website](http://jacoco.org) */
  const val org_jacoco_agent: String = "org.jacoco:org.jacoco.agent:" + Versions.org_jacoco_agent

  /**
   * [org.jacoco.ant website](http://jacoco.org) */
  const val org_jacoco_ant: String = "org.jacoco:org.jacoco.ant:" + Versions.org_jacoco_ant

  /**
   * [org.jacoco.core website](http://jacoco.org) */
  const val org_jacoco_core: String = "org.jacoco:org.jacoco.core:" + Versions.org_jacoco_core

  /**
   * [kotlin-android-extensions website](https://kotlinlang.org/) */
  const val kotlin_android_extensions: String =
    "org.jetbrains.kotlin:kotlin-android-extensions:" + Versions.kotlin_android_extensions

  /**
   * [kotlin-annotation-processing-gradle website](https://kotlinlang.org/) */
  const val kotlin_annotation_processing_gradle: String =
    "org.jetbrains.kotlin:kotlin-annotation-processing-gradle:" + Versions.kotlin_annotation_processing_gradle

  /**
   * [kotlin-gradle-plugin website](https://kotlinlang.org/) */
  const val kotlin_gradle_plugin: String =
    "org.jetbrains.kotlin:kotlin-gradle-plugin:" + Versions.kotlin_gradle_plugin

  /**
   * [kotlin-reflect website](https://kotlinlang.org/) */
  const val kotlin_reflect: String =
    "org.jetbrains.kotlin:kotlin-reflect:" + Versions.kotlin_reflect

  /**
   * [kotlin-sam-with-receiver website](https://kotlinlang.org/) */
  const val kotlin_sam_with_receiver: String =
    "org.jetbrains.kotlin:kotlin-sam-with-receiver:" + Versions.kotlin_sam_with_receiver

  /**
   * [kotlin-scripting-compiler-embeddable website](https://kotlinlang.org/) */
  const val kotlin_scripting_compiler_embeddable: String =
    "org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:" + Versions.kotlin_scripting_compiler_embeddable

  /**
   * [kotlin-stdlib-jdk8 website](https://kotlinlang.org/) */
  const val org_jetbrains_kotlin_kotlin_stdlib_jdk8: String =
    "org.jetbrains.kotlin:kotlin-stdlib-jdk8:" + Versions.org_jetbrains_kotlin_kotlin_stdlib_jdk8

  /**
   * [kotlin-test-junit website](https://kotlinlang.org/) */
  const val kotlin_test_junit: String =
    "org.jetbrains.kotlin:kotlin-test-junit:" + Versions.kotlin_test_junit
}
